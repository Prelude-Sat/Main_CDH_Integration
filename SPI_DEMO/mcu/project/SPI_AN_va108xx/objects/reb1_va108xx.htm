<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\reb1_va108xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\reb1_va108xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Thu May 12 12:13:12 2016
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Output_data_RTT &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">NMI_Handler</a><BR>
 <LI><a href="#[33]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">MemManage_Handler</a><BR>
 <LI><a href="#[34]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">BusFault_Handler</a><BR>
 <LI><a href="#[35]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">UsageFault_Handler</a><BR>
 <LI><a href="#[36]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">SVC_Handler</a><BR>
 <LI><a href="#[37]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">DebugMon_Handler</a><BR>
 <LI><a href="#[38]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">PendSV_Handler</a><BR>
 <LI><a href="#[39]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">SysTick_Handler</a><BR>
 <LI><a href="#[47]">OC13_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">OC13_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">BusFault_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[37]">DebugMon_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[32]">HardFault_Handler</a> from hardfault_handler.o(.emb_text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[33]">MemManage_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[31]">NMI_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[47]">OC13_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[48]">OC14_IRQHandler</a> from spi_an_main.o(i.OC14_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[49]">OC15_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[4a]">OC16_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[4b]">OC17_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[4c]">OC18_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[4d]">OC19_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[4e]">OC20_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[4f]">OC21_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[50]">OC22_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[51]">OC23_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[52]">OC24_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[53]">OC25_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[54]">OC26_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[55]">OC27_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[56]">OC28_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[57]">OC29_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[3c]">OC2_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[58]">OC30_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[59]">OC31_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[38]">PendSV_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[5d]">Reset_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[36]">SVC_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[39]">SysTick_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_va108xx.o(i.SystemInit) referenced from startup_va108xx.o(.text)
 <LI><a href="#[35]">UsageFault_Handler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[3f]">VOR_GPIO_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[9]">VOR_I2C0_Control</a> from i2c_drv_api.o(i.VOR_I2C0_Control) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[8]">VOR_I2C0_GetDataCount</a> from i2c_drv_api.o(i.VOR_I2C0_GetDataCount) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[a]">VOR_I2C0_GetStatus</a> from i2c_drv_api.o(i.VOR_I2C0_GetStatus) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[2]">VOR_I2C0_Initialize</a> from i2c_drv_api.o(i.VOR_I2C0_Initialize) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[43]">VOR_I2C0_MS_IRQHandler</a> from i2c_drv_api.o(i.VOR_I2C0_MS_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[5]">VOR_I2C0_MasterReceive</a> from i2c_drv_api.o(i.VOR_I2C0_MasterReceive) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[4]">VOR_I2C0_MasterTransmit</a> from i2c_drv_api.o(i.VOR_I2C0_MasterTransmit) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[44]">VOR_I2C0_SL_IRQHandler</a> from i2c_drv_api.o(i.VOR_I2C0_SL_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[7]">VOR_I2C0_SlaveReceive</a> from i2c_drv_api.o(i.VOR_I2C0_SlaveReceive) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[6]">VOR_I2C0_SlaveTransmit</a> from i2c_drv_api.o(i.VOR_I2C0_SlaveTransmit) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[3]">VOR_I2C0_Uninitialize</a> from i2c_drv_api.o(i.VOR_I2C0_Uninitialize) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[12]">VOR_I2C1_Control</a> from i2c_drv_api.o(i.VOR_I2C1_Control) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[11]">VOR_I2C1_GetDataCount</a> from i2c_drv_api.o(i.VOR_I2C1_GetDataCount) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[13]">VOR_I2C1_GetStatus</a> from i2c_drv_api.o(i.VOR_I2C1_GetStatus) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[b]">VOR_I2C1_Initialize</a> from i2c_drv_api.o(i.VOR_I2C1_Initialize) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[45]">VOR_I2C1_MS_IRQHandler</a> from i2c_drv_api.o(i.VOR_I2C1_MS_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[e]">VOR_I2C1_MasterReceive</a> from i2c_drv_api.o(i.VOR_I2C1_MasterReceive) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[d]">VOR_I2C1_MasterTransmit</a> from i2c_drv_api.o(i.VOR_I2C1_MasterTransmit) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[46]">VOR_I2C1_SL_IRQHandler</a> from i2c_drv_api.o(i.VOR_I2C1_SL_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[10]">VOR_I2C1_SlaveReceive</a> from i2c_drv_api.o(i.VOR_I2C1_SlaveReceive) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[f]">VOR_I2C1_SlaveTransmit</a> from i2c_drv_api.o(i.VOR_I2C1_SlaveTransmit) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[c]">VOR_I2C1_Uninitialize</a> from i2c_drv_api.o(i.VOR_I2C1_Uninitialize) referenced 2 times from i2c_drv_api.o(.data)
 <LI><a href="#[1]">VOR_I2Cx_GetVersion</a> from i2c_va108xx.o(i.VOR_I2Cx_GetVersion) referenced 4 times from i2c_drv_api.o(.data)
 <LI><a href="#[1a]">VOR_SPI0_Control</a> from spi_drv_api.o(i.VOR_SPI0_Control) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[1d]">VOR_SPI0_GetRxCount</a> from spi_drv_api.o(i.VOR_SPI0_GetRxCount) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[1b]">VOR_SPI0_GetStatus</a> from spi_drv_api.o(i.VOR_SPI0_GetStatus) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[1c]">VOR_SPI0_GetTxCount</a> from spi_drv_api.o(i.VOR_SPI0_GetTxCount) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[40]">VOR_SPI0_IRQHandler</a> from spi_drv_api.o(i.VOR_SPI0_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[15]">VOR_SPI0_Initialize</a> from spi_drv_api.o(i.VOR_SPI0_Initialize) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[18]">VOR_SPI0_Receive</a> from spi_drv_api.o(i.VOR_SPI0_Receive) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[17]">VOR_SPI0_Send</a> from spi_drv_api.o(i.VOR_SPI0_Send) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[19]">VOR_SPI0_Transfer</a> from spi_drv_api.o(i.VOR_SPI0_Transfer) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[16]">VOR_SPI0_Uninitialize</a> from spi_drv_api.o(i.VOR_SPI0_Uninitialize) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[23]">VOR_SPI1_Control</a> from spi_drv_api.o(i.VOR_SPI1_Control) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[26]">VOR_SPI1_GetRxCount</a> from spi_drv_api.o(i.VOR_SPI1_GetRxCount) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[24]">VOR_SPI1_GetStatus</a> from spi_drv_api.o(i.VOR_SPI1_GetStatus) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[25]">VOR_SPI1_GetTxCount</a> from spi_drv_api.o(i.VOR_SPI1_GetTxCount) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[41]">VOR_SPI1_IRQHandler</a> from spi_drv_api.o(i.VOR_SPI1_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[1e]">VOR_SPI1_Initialize</a> from spi_drv_api.o(i.VOR_SPI1_Initialize) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[21]">VOR_SPI1_Receive</a> from spi_drv_api.o(i.VOR_SPI1_Receive) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[20]">VOR_SPI1_Send</a> from spi_drv_api.o(i.VOR_SPI1_Send) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[22]">VOR_SPI1_Transfer</a> from spi_drv_api.o(i.VOR_SPI1_Transfer) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[1f]">VOR_SPI1_Uninitialize</a> from spi_drv_api.o(i.VOR_SPI1_Uninitialize) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[2c]">VOR_SPI2_Control</a> from spi_drv_api.o(i.VOR_SPI2_Control) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[2f]">VOR_SPI2_GetRxCount</a> from spi_drv_api.o(i.VOR_SPI2_GetRxCount) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[2d]">VOR_SPI2_GetStatus</a> from spi_drv_api.o(i.VOR_SPI2_GetStatus) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[2e]">VOR_SPI2_GetTxCount</a> from spi_drv_api.o(i.VOR_SPI2_GetTxCount) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[42]">VOR_SPI2_IRQHandler</a> from spi_drv_api.o(i.VOR_SPI2_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[27]">VOR_SPI2_Initialize</a> from spi_drv_api.o(i.VOR_SPI2_Initialize) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[2a]">VOR_SPI2_Receive</a> from spi_drv_api.o(i.VOR_SPI2_Receive) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[29]">VOR_SPI2_Send</a> from spi_drv_api.o(i.VOR_SPI2_Send) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[2b]">VOR_SPI2_Transfer</a> from spi_drv_api.o(i.VOR_SPI2_Transfer) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[28]">VOR_SPI2_Uninitialize</a> from spi_drv_api.o(i.VOR_SPI2_Uninitialize) referenced 2 times from spi_drv_api.o(.data)
 <LI><a href="#[14]">VOR_SPIx_GetVersion</a> from spi_va108xx.o(i.VOR_SPIx_GetVersion) referenced 6 times from spi_drv_api.o(.data)
 <LI><a href="#[3a]">VOR_TIM0_IRQHandler</a> from reb_timer.o(i.VOR_TIM0_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[3b]">VOR_TIM1_IRQHandler</a> from reb_timer.o(i.VOR_TIM1_IRQHandler) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[3d]">VOR_UART0_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[3e]">VOR_UART1_IRQHandler</a> from startup_va108xx.o(.text) referenced from startup_va108xx.o(RESET)
 <LI><a href="#[5c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_va108xx.o(.text)
 <LI><a href="#[5a]">main</a> from spi_an_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ab]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ac]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ad]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ae]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[af]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[32]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hardfault_handler.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_va108xx.o(.text))

<P><STRONG><a name="[31]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>OC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC13_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC13_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OC15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>OC16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>OC17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OC18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OC19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OC20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OC21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OC22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OC23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OC24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OC25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OC26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OC27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OC28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OC29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OC30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OC31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>VOR_GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>VOR_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>VOR_UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_va108xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Control
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Sleep
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_Clock_Rate
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_32bytes_wint
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Transfer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Receive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterTransmit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[a5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>C_HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardfault_handler.o(i.C_HardFault_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[48]"></a>OC14_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, spi_an_main.o(i.OC14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OC14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Output_data_RTT</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, spi_an_main.o(i.Output_data_RTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Output_data_RTT &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>ProgramPage_SPIA</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, spi_an_main.o(i.ProgramPage_SPIA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ProgramPage_SPIA
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>REB1_SPIA_setup</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi_an_main.o(i.REB1_SPIA_setup))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Read_32bytes_from_EE</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, spi_an_main.o(i.Read_32bytes_from_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_32bytes_from_EE
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Read_32bytes_wint</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, spi_an_main.o(i.Read_32bytes_wint))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Read_32bytes_wint &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigDownBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_ConfigDownBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>SEGGER_RTT_SetTerminal</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_SetTerminal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_SetTerminal &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[70]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[71]"></a>SEGGER_RTT_WriteString</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_data_RTT
</UL>

<P><STRONG><a name="[73]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 404 bytes, Stack size 128 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[a7]"></a>Single_Frame_TX_SPIA</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, spi_an_main.o(i.Single_Frame_TX_SPIA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Single_Frame_TX_SPIA
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_va108xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>VOR_Disable_Irq</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, irq_va108xx.o(i.VOR_Disable_Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Transfer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Receive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_IrqHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_abort_transfer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterTransmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterReceive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_TIM1_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_TIM0_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_abort_transfer
</UL>

<P><STRONG><a name="[7a]"></a>VOR_Enable_Irq</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, irq_va108xx.o(i.VOR_Enable_Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Transfer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Receive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveReceive
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterTransmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterReceive
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_TIM1_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_TIM0_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>VOR_Get_ClockFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, driver.common.o(i.VOR_Get_ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Control
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_Clock_Rate
</UL>

<P><STRONG><a name="[8d]"></a>VOR_Get_SysTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, driver.common.o(i.VOR_Get_SysTime))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Transfer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveReceive
</UL>

<P><STRONG><a name="[43]"></a>VOR_I2C0_MS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_MS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_I2C0_MS_IRQHandler &rArr; VOR_I2C_MasterHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>VOR_I2C0_SL_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_SL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_I2C0_SL_IRQHandler &rArr; VOR_I2C_SlaveHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>VOR_I2C1_MS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_MS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_I2C1_MS_IRQHandler &rArr; VOR_I2C_MasterHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>VOR_I2C1_SL_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_SL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_I2C1_SL_IRQHandler &rArr; VOR_I2C_SlaveHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>VOR_I2C_Control</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, i2c_va108xx.o(i.VOR_I2C_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VOR_I2C_Control &rArr; VOR_I2C_abort_transfer &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_abort_transfer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Get_ClockFreq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_Control
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_Control
</UL>

<P><STRONG><a name="[7e]"></a>VOR_I2C_GetDataCount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_va108xx.o(i.VOR_I2C_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_GetDataCount
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_GetDataCount
</UL>

<P><STRONG><a name="[7f]"></a>VOR_I2C_GetStatus</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, i2c_va108xx.o(i.VOR_I2C_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2C_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_GetStatus
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_GetStatus
</UL>

<P><STRONG><a name="[80]"></a>VOR_I2C_Initialize</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, i2c_va108xx.o(i.VOR_I2C_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_Initialize
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_Initialize
</UL>

<P><STRONG><a name="[81]"></a>VOR_I2C_MasterHandler</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, i2c_va108xx.o(i.VOR_I2C_MasterHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VOR_I2C_MasterHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_MS_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_MS_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>VOR_I2C_MasterReceive</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, i2c_va108xx.o(i.VOR_I2C_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_I2C_MasterReceive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Setup
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_MasterReceive
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_MasterReceive
</UL>

<P><STRONG><a name="[83]"></a>VOR_I2C_MasterTransmit</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, i2c_va108xx.o(i.VOR_I2C_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_I2C_MasterTransmit &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Setup
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_MasterTransmit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_MasterTransmit
</UL>

<P><STRONG><a name="[84]"></a>VOR_I2C_SlaveHandler</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, i2c_va108xx.o(i.VOR_I2C_SlaveHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VOR_I2C_SlaveHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_SL_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_SL_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>VOR_I2C_SlaveReceive</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, i2c_va108xx.o(i.VOR_I2C_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VOR_I2C_SlaveReceive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Setup
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Get_SysTime
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_SlaveReceive
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_SlaveReceive
</UL>

<P><STRONG><a name="[86]"></a>VOR_I2C_SlaveTransmit</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, i2c_va108xx.o(i.VOR_I2C_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VOR_I2C_SlaveTransmit &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Setup
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Get_SysTime
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_SlaveTransmit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_SlaveTransmit
</UL>

<P><STRONG><a name="[87]"></a>VOR_I2C_Uninitialize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2c_va108xx.o(i.VOR_I2C_Uninitialize))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C1_Uninitialize
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C0_Uninitialize
</UL>

<P><STRONG><a name="[89]"></a>VOR_I2C_abort_transfer</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, i2c_va108xx.o(i.VOR_I2C_abort_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VOR_I2C_abort_transfer &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Control
</UL>

<P><STRONG><a name="[1]"></a>VOR_I2Cx_GetVersion</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i2c_va108xx.o(i.VOR_I2Cx_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2Cx_GetVersion
</UL>
<BR>[Address Reference Count : 2]<UL><LI> i2c_drv_api.o(.data)
<LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>VOR_SPI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_SPI0_IRQHandler &rArr; VOR_SPI_IrqHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>VOR_SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_SPI1_IRQHandler &rArr; VOR_SPI_IrqHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>VOR_SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_SPI2_IRQHandler &rArr; VOR_SPI_IrqHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>VOR_SPI_CTRL_ENABLE_BLOCKMODE_OPR</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_CTRL_ENABLE_BLOCKMODE_OPR))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[9a]"></a>VOR_SPI_CTRL_SLAVE_OP_DISABLEMODE</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_CTRL_SLAVE_OP_DISABLEMODE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[8f]"></a>VOR_SPI_Control</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, spi_va108xx.o(i.VOR_SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = VOR_SPI_Control &rArr; VOR_SPI_SET_Clock_Rate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_abort_transfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SLAVE_SELECT_OPR
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_TX_FIFOTRG
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_SLAVEMODE
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_RX_FIFOTRG
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_LOOPBACKMODE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_Clock_Rate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_Clock_Mode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_SET_CTRL_SIZE_OPR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_ENABLE_INTERFACE
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_CTRL_SLAVE_OP_DISABLEMODE
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_CTRL_ENABLE_BLOCKMODE_OPR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_Control
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_Control
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_Control
</UL>

<P><STRONG><a name="[a4]"></a>VOR_SPI_ENABLE_INTERFACE</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_ENABLE_INTERFACE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[90]"></a>VOR_SPI_GetRxCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_GetRxCount
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_GetRxCount
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_GetRxCount
</UL>

<P><STRONG><a name="[91]"></a>VOR_SPI_GetStatus</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, spi_va108xx.o(i.VOR_SPI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_GetStatus
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_GetStatus
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_GetStatus
</UL>

<P><STRONG><a name="[92]"></a>VOR_SPI_GetTxCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_GetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_GetTxCount
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_GetTxCount
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_GetTxCount
</UL>

<P><STRONG><a name="[94]"></a>VOR_SPI_Initialize</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_Initialize
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_Initialize
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_Initialize
</UL>

<P><STRONG><a name="[93]"></a>VOR_SPI_IrqHandler</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, spi_va108xx.o(i.VOR_SPI_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VOR_SPI_IrqHandler &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>VOR_SPI_Receive</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, spi_va108xx.o(i.VOR_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VOR_SPI_Receive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_Receive
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_Receive
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_Receive
</UL>

<P><STRONG><a name="[a2]"></a>VOR_SPI_SET_CTRL_SIZE_OPR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_SET_CTRL_SIZE_OPR))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[9b]"></a>VOR_SPI_SET_Clock_Mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi_va108xx.o(i.VOR_SPI_SET_Clock_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI_SET_Clock_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[9c]"></a>VOR_SPI_SET_Clock_Rate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi_va108xx.o(i.VOR_SPI_SET_Clock_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VOR_SPI_SET_Clock_Rate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Get_ClockFreq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[9f]"></a>VOR_SPI_SET_LOOPBACKMODE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_SET_LOOPBACKMODE))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[9e]"></a>VOR_SPI_SET_RX_FIFOTRG</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_SET_RX_FIFOTRG))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[99]"></a>VOR_SPI_SET_SLAVEMODE</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_va108xx.o(i.VOR_SPI_SET_SLAVEMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI_SET_SLAVEMODE
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[9d]"></a>VOR_SPI_SET_TX_FIFOTRG</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_SET_TX_FIFOTRG))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[a1]"></a>VOR_SPI_SLAVE_SELECT_OPR</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_SLAVE_SELECT_OPR))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[96]"></a>VOR_SPI_Send</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, spi_va108xx.o(i.VOR_SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VOR_SPI_Send &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_Send
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_Send
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_Send
</UL>

<P><STRONG><a name="[97]"></a>VOR_SPI_Transfer</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, spi_va108xx.o(i.VOR_SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_SPI_Transfer &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Get_SysTime
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_Transfer
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_Transfer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_Transfer
</UL>

<P><STRONG><a name="[98]"></a>VOR_SPI_Uninitialize</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi_va108xx.o(i.VOR_SPI_Uninitialize))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI2_Uninitialize
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI1_Uninitialize
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI0_Uninitialize
</UL>

<P><STRONG><a name="[a3]"></a>VOR_SPI_abort_transfer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_va108xx.o(i.VOR_SPI_abort_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VOR_SPI_abort_transfer &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>

<P><STRONG><a name="[14]"></a>VOR_SPIx_GetVersion</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_va108xx.o(i.VOR_SPIx_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPIx_GetVersion
</UL>
<BR>[Address Reference Count : 3]<UL><LI> spi_drv_api.o(.data)
<LI> spi_drv_api.o(.data)
<LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>VOR_Sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.common.o(i.VOR_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VOR_Sleep &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Stop
</UL>

<P><STRONG><a name="[3a]"></a>VOR_TIM0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, reb_timer.o(i.VOR_TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VOR_TIM0_IRQHandler &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>VOR_TIM1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, reb_timer.o(i.VOR_TIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VOR_TIM1_IRQHandler &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_va108xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq_va108xx.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Control
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 434 bytes, Stack size 272 bytes, spi_an_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = main &rArr; Output_data_RTT &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Frame_TX_SPIA
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_32bytes_wint
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_32bytes_from_EE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REB1_SPIA_setup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage_SPIA
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_data_RTT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[79]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, irq_va108xx.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Disable_Irq
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, irq_va108xx.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
</UL>

<P><STRONG><a name="[7b]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, irq_va108xx.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Enable_Irq
</UL>

<P><STRONG><a name="[9]"></a>VOR_I2C0_Control</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_I2C0_Control &rArr; VOR_I2C_Control &rArr; VOR_I2C_abort_transfer &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>VOR_I2C0_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2C0_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>VOR_I2C0_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VOR_I2C0_GetStatus &rArr; VOR_I2C_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>VOR_I2C0_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2C0_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>VOR_I2C0_MasterReceive</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, i2c_drv_api.o(i.VOR_I2C0_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VOR_I2C0_MasterReceive &rArr; VOR_I2C_MasterReceive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>VOR_I2C0_MasterTransmit</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, i2c_drv_api.o(i.VOR_I2C0_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VOR_I2C0_MasterTransmit &rArr; VOR_I2C_MasterTransmit &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>VOR_I2C0_SlaveReceive</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VOR_I2C0_SlaveReceive &rArr; VOR_I2C_SlaveReceive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>VOR_I2C0_SlaveTransmit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_I2C0_SlaveTransmit &rArr; VOR_I2C_SlaveTransmit &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>VOR_I2C0_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2C0_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>VOR_I2C1_Control</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VOR_I2C1_Control &rArr; VOR_I2C_Control &rArr; VOR_I2C_abort_transfer &rArr; VOR_Disable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>VOR_I2C1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2C1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>VOR_I2C1_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VOR_I2C1_GetStatus &rArr; VOR_I2C_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>VOR_I2C1_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2C1_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>VOR_I2C1_MasterReceive</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, i2c_drv_api.o(i.VOR_I2C1_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VOR_I2C1_MasterReceive &rArr; VOR_I2C_MasterReceive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>VOR_I2C1_MasterTransmit</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, i2c_drv_api.o(i.VOR_I2C1_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VOR_I2C1_MasterTransmit &rArr; VOR_I2C_MasterTransmit &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>VOR_I2C1_SlaveReceive</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VOR_I2C1_SlaveReceive &rArr; VOR_I2C_SlaveReceive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>VOR_I2C1_SlaveTransmit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_I2C1_SlaveTransmit &rArr; VOR_I2C_SlaveTransmit &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>VOR_I2C1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_drv_api.o(i.VOR_I2C1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_I2C1_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_drv_api.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>VOR_I2C_Setup</STRONG> (Thumb, 386 bytes, Stack size 20 bytes, i2c_va108xx.o(i.VOR_I2C_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VOR_I2C_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveReceive
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterTransmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterReceive
</UL>

<P><STRONG><a name="[8b]"></a>VOR_I2C_Stop</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, i2c_va108xx.o(i.VOR_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VOR_I2C_Stop &rArr; VOR_Sleep &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveTransmit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_SlaveReceive
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterTransmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_I2C_MasterReceive
</UL>

<P><STRONG><a name="[1a]"></a>VOR_SPI0_Control</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VOR_SPI0_Control &rArr; VOR_SPI_Control &rArr; VOR_SPI_SET_Clock_Rate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>VOR_SPI0_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI0_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>VOR_SPI0_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VOR_SPI0_GetStatus &rArr; VOR_SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>VOR_SPI0_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI0_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>VOR_SPI0_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI0_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>VOR_SPI0_Receive</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_SPI0_Receive &rArr; VOR_SPI_Receive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>VOR_SPI0_Send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VOR_SPI0_Send &rArr; VOR_SPI_Send &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>VOR_SPI0_Transfer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VOR_SPI0_Transfer &rArr; VOR_SPI_Transfer &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>VOR_SPI0_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI0_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI0_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>VOR_SPI1_Control</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VOR_SPI1_Control &rArr; VOR_SPI_Control &rArr; VOR_SPI_SET_Clock_Rate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>VOR_SPI1_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI1_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>VOR_SPI1_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VOR_SPI1_GetStatus &rArr; VOR_SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>VOR_SPI1_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI1_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>VOR_SPI1_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI1_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>VOR_SPI1_Receive</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_SPI1_Receive &rArr; VOR_SPI_Receive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>VOR_SPI1_Send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VOR_SPI1_Send &rArr; VOR_SPI_Send &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>VOR_SPI1_Transfer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VOR_SPI1_Transfer &rArr; VOR_SPI_Transfer &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>VOR_SPI1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI1_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>VOR_SPI2_Control</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VOR_SPI2_Control &rArr; VOR_SPI_Control &rArr; VOR_SPI_SET_Clock_Rate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>VOR_SPI2_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI2_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>VOR_SPI2_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VOR_SPI2_GetStatus &rArr; VOR_SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>VOR_SPI2_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI2_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>VOR_SPI2_Initialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI2_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>VOR_SPI2_Receive</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VOR_SPI2_Receive &rArr; VOR_SPI_Receive &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>VOR_SPI2_Send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VOR_SPI2_Send &rArr; VOR_SPI_Send &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>VOR_SPI2_Transfer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VOR_SPI2_Transfer &rArr; VOR_SPI_Transfer &rArr; VOR_Enable_Irq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>VOR_SPI2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_drv_api.o(i.VOR_SPI2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VOR_SPI2_Uninitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOR_SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_drv_api.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>_DoInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
</UL>

<P><STRONG><a name="[6c]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[6e]"></a>_WriteBlocking</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[6d]"></a>_WriteNoCheck</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[75]"></a>_PrintInt</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[76]"></a>_PrintUnsigned</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[74]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
